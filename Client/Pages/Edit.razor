@page "/edit/{id}"
@using ProductManagement.Client.Model
@using System.Text
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Edit Product</PageTitle>



<div class="d-flex justify-content-center">
    @if (product == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <EditForm Model="product" OnValidSubmit="UpdateProduct">
            <DataAnnotationsValidator />
            <br />
            <div class="container border p-3">
                <h2 class="text-center">Edit Product</h2>
                <hr />
                <div class="row">
                    <div class="col-12 col-lg-2 col-xl-2">
                        <label for="Name" class="control-label pt-2" style="font-size:20px;">Name</label>
                    </div>
                    <div class="col-12 col-lg-10 col-xl-10 pb-3">
                        <input id="Name" class="form-control" @bind="product.ProductName" />
                        <div class="col-10">
                            <ValidationMessage For="() => product.ProductName" />
                        </div>
                    </div>

                    <div class="col-12 col-lg-2 col-xl-2">
                        <label class="control-label pt-2" style="font-size:20px;">Price</label>
                    </div>
                    <div class="col-12 col-lg-10 col-xl-10 pb-3">
                        <input id="Price" class="form-control" @bind="product.Price" />
                        <div class="col-10">
                            <ValidationMessage For="() => product.Price" />
                        </div>
                    </div>

                    <div class="col-12 col-lg-2 col-xl-2">
                        <label class="control-label pt-2" style="font-size:20px;">Description</label>
                    </div>
                    <div class="col-12 col-lg-10 col-xl-10 pb-3">
                        <textarea id="Description" class="form-control" @bind="product.Description" rows="5"></textarea>
                        <div class="col-10">
                            <ValidationMessage For="() => product.Description" />
                        </div>
                    </div>

                    <div class="col-12 col-lg-2 col-xl-2">
                        <label for="Availability" class="control-label" style="font-size:20px;">Availability</label>
                        
                    </div>
                    <div class="col-12 col-lg-10 col-xl-10 mb-5">
                <input type="checkbox" class="form-check-input" @bind="product.Availability">
                    </div> 

                    
                        <div class="col-5  offset-2">
                            <a href="/" class="btn-primary btn form-control ">Back To List</a>
                        </div>
                        <div class="col-5">
                            <input type="submit" value="Update" class="btn btn-success form-control" />
                        </div>
                   
                </div>
                <div>
                </div>
            </div>
        </EditForm>
    }
</div>

@code {
    [Parameter]
    public string? Id { get; set; }

    private Product? product;

    protected override async Task OnInitializedAsync()
    {
        int productId = Convert.ToInt32(Id);
        product = await Http.GetFromJsonAsync<Product>($"api/Product/{productId}");
    }

    public async Task UpdateProduct()
    {
        var editContext = new EditContext(product);
        var isValid = editContext.Validate();
        if (product != null && isValid)
        {
            var res= await JSRuntime.InvokeAsync<bool>("showEditConfirmation");
            if (res)
            {
                var json = JsonSerializer.Serialize(product);
                var content = new StringContent(json, Encoding.UTF8, "application/json");
                var response = await Http.PutAsync("api/Product", content);
                if (response.IsSuccessStatusCode)
                {
                    await JSRuntime.InvokeAsync<bool>("SuccessAlert", "Product Updated Successfully");
                    Navigation.NavigateTo("/");
                }
                else
                {
                    Console.WriteLine($"Failed to create product. Status code: {response.StatusCode}");

                }
            }else if (!res)
            {
                Navigation.NavigateTo("/");
            }

        }
        else
        {
            await JSRuntime.InvokeVoidAsync("confirm", "Product is null");
        }
    }

}