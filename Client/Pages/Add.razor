@page "/create"
@using System.Text.Json
@using System.Text
@using Microsoft.AspNetCore.Components.Forms
@using ProductManagement.Client.Model
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Add Product</PageTitle>

<div class="d-flex justify-content-center">
    @if (product == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <EditForm Model="product" OnValidSubmit="CreateProduct">
            <DataAnnotationsValidator />
            <br />
            <div class="container border p-3">
                <h2 class="text-center">Create Product</h2>
                <hr />
                <div class="row d-flex">

                    <div class="col-12 col-lg-2 col-xl-2">
                        <label for="Name" class="control-label pt-2" style="font-size:20px;">Name</label>
                    </div>
                    <div class="col-12 col-lg-10 col-xl-10 pb-3">
                        <input id="Name" class="form-control" @bind="product.ProductName" />
                        <div class="col-10">
                            <ValidationMessage For="() => product.ProductName" />
                        </div>
                    </div>

                    <div class="col-12 col-lg-2 col-xl-2">
                        <label class="control-label pt-2" style="font-size:20px;">Price</label>
                    </div>
                    <div class="col-12 col-lg-10 col-xl-10 pb-3">
                        <input id="Price" class="form-control" @bind="product.Price" />
                        <div class="col-10">
                            <ValidationMessage For="() => product.Price" />
                        </div>
                    </div>

                    <div class="col-12 col-lg-2 col-xl-2">
                        <label class="control-label pt-2" style="font-size:20px;">Description</label>
                    </div>
                    <div class="col-12 col-lg-10 col-xl-10 pb-3">
                        <textarea id="Description" class="form-control" @bind="product.Description" rows="5"></textarea>
                        <div class="col-10">
                            <ValidationMessage For="() => product.Description" />
                        </div>
                    </div>

                    <div class="col-12 col-lg-2 col-xl-2">
                        <label for="Availability" class="control-label pt-2" style="font-size:20px;">Availability</label>
                    </div>
                    <div class="col-12 col-lg-10 col-xl-10 pb-3">
                        <input type="checkbox" class="form-check-input" @bind="product.Availability">
                    </div>

                    <div class="col-5  offset-2">
                        <a href="/" class="btn-primary btn form-control ">Back</a>
                    </div>
                    <div class="col-5">
                        <input type="submit" value="Add" class="btn btn-success form-control" />
                    </div>
                </div>
                <div>
                </div>
            </div>
        </EditForm>
    }
</div>


@code {
    private Product product = new Product();

    public async Task CreateProduct()
    {     
            var editContext = new EditContext(product);
            var isValid = editContext.Validate();

            if (isValid)
            {
                var json = JsonSerializer.Serialize(product);
                var content = new StringContent(json, Encoding.UTF8, "application/json");

                var response = await Http.PostAsync("api/Product", content);

                if (response.IsSuccessStatusCode)
                {
                await JSRuntime.InvokeAsync<bool>("SuccessAlert", "Product Added Successfully");
                Navigation.NavigateTo("/");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("Swal.fire", "Error!", "Something went wrong!", "error");
                }
            }      
    }
}
